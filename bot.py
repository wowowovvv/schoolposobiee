import logging
import os
from aiogram import Bot, Router, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from openai import OpenAI
# –ø—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–∞ –º–æ–¥—É–ª–µ–π
load_dotenv()
#–∞ —Ç—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ..
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
bot = Bot(
    token=os.getenv("TELEGRAM_TOKEN"),
    default=DefaultBotProperties(parse_mode="HTML")
) #–≤—Å–µ —ç—Ç–∏ –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ, –∫—Ä–æ–º–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ –≤ —Ç–≥
router = Router()
storage = MemoryStorage()

class MaterialRequest(StatesGroup):
    topic = State()
    age_group = State()
    difficulty = State()
    format_type = State()

@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìö –°–æ–∑–¥–∞—Ç—å –ø–æ—Å–æ–±–∏–µ")]],
        resize_keyboard=True
    )
    await message.answer("<b>üëã –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫</b>", reply_markup=keyboard)

@router.message(lambda message: message.text == "üìö –°–æ–∑–¥–∞—Ç—å –ø–æ—Å–æ–±–∏–µ")
async def create_guide(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —É—Ä–æ–∫–∞:")
    await state.set_state(MaterialRequest.topic)

@router.message(MaterialRequest.topic)
async def process_topic(message: types.Message, state: FSMContext):
    await state.update_data(topic=message.text)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="1-4 –∫–ª–∞—Å—Å")],
            [types.KeyboardButton(text="5-9 –∫–ª–∞—Å—Å")],
            [types.KeyboardButton(text="9-11 –∫–ª–∞—Å—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer("üè´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=keyboard)
    await state.set_state(MaterialRequest.age_group) 
@router.message(MaterialRequest.age_group)
async def process_grade(message: types.Message, state: FSMContext):
    await state.update_data(grade=message.text)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π")],
            [types.KeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π")],
            [types.KeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.set_state(MaterialRequest.difficulty)

@router.message(MaterialRequest.difficulty)
async def process_difficulty(message: types.Message, state: FSMContext):
    await state.update_data(difficulty=message.text)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìñ –¢–µ–æ—Ä–∏—è + –∑–∞–¥–∞–Ω–∏—è")],
            [types.KeyboardButton(text="üìù –¢–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
            [types.KeyboardButton(text="üß† –¢–µ—Å—Ç—ã + –æ—Ç–≤–µ—Ç—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard)
    await state.set_state(MaterialRequest.format_type)

@router.message(MaterialRequest.format_type)
async def send_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    prompt = f"""
    –°–æ–∑–¥–∞–π –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–æ–±–∏–µ –ø–æ —Ç–µ–º–µ "{data['topic']}".
    –ö–ª–∞—Å—Å: {data['grade']}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty']}, —Ñ–æ—Ä–º–∞—Ç: {message.text}.
    –í–∫–ª—é—á–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –§–ì–û–°.
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # P.S —Ç—É—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –º–æ–¥–µ–ª—å —á–∞—Ç–∞, —Ç–æ—Ç –∂–µ gpt 4, –∏–ª–∏ –º–∏–Ω–∏ 1o, –ø—Ä–æ—Å—Ç–æ 1o.. –Ω–æ —Ç–∞–º –≤—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è API (
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=1500
        )
        
        material = response.choices[0].message.content
        await message.answer(f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n{material}")
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}")
    await state.clear()
if __name__ == "__main__":
    from aiogram import Dispatcher
    
    dp = Dispatcher(storage=storage)
    dp.include_router(router)
    
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
 #–Ω–∞–¥–µ—é—Å—å —ç—Ç–æ—Ç –∫–æ–¥ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω) :)